# -*- coding: utf-8; -*-
#
# This file is part of BOM Document Generator Tool.
#
# MMC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MMC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
#The MIT License (MIT)

#Copyright (c) 2014 firepick-delta

# (c) 2014 firepick-delta, http://delta.firepick.org/
# Author: David Shanklin, http://www.sagesmithing.org

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

import os
import re
import MarkdownUtilities
from time import gmtime, strftime
from xml.etree.ElementTree import Element, SubElement, Comment
from xml.etree import ElementTree
from xml.dom import minidom


BOM_DOCUMENT_TOOL_VERISON = '0.1'

AUTOGENERATED_MARKDOWN_COMMENT_END_TAG = "<!--(\d*[.]\d*) end auto-generation-->"

# Part Status
PS_NOTAVAILABLE = 'na'
PS_ACTIVE = 'active'
PS_DISCONTINUED = 'discontinued'
PS_ALTERNATIVE = 'alternative'
PS_PROTECTED = 'protected'

DEFAULT_COMMENT_TAG = {'toolver':'0.0','itemtype':'', 'item':'', 'date': '', 'status':'na', 'image':''}
EXAMPLE_COMMENT_TAG = {'toolver':'0.1','itemtype':'part', 'item':'A1232', 'date': '14441222', 'status':'active'}
NUMBER_OF_COMMENT_TAG_ITEMS = 5

TEMP_FILE_NAME = 'tempdocgenerator.md'

def IsAutoGeneratedMarkdownEndCommentTag(line):
    regex = re.compile(AUTOGENERATED_MARKDOWN_COMMENT_END_TAG)
    found = re.findall(regex,line)
    retValue = False
    if found:
        retValue = True
    return retValue
 
def ExtractMarkdownCommentTagForItem(line):

    commentTag = DEFAULT_COMMENT_TAG
    regex = re.compile("<!--(.*)-->")
    found = re.findall(regex,line)
    commentTagList = []

    if found:
        commentTagList = found[0].split('/')

    if commentTagList and (NUMBER_OF_COMMENT_TAG_ITEMS == len(commentTagList)):
        commentTag['toolver'] = commentTagList[0]
        commentTag['itemtype'] = commentTagList[1]
        commentTag['item'] = commentTagList[2]
        commentTag['date'] = commentTagList[3]
        commentTag['status'] = commentTagList[4]
    return commentTag


def CreateMarkdownCommentTagForItem(itemTag):
    markdownCommentTag = '<!--' + itemTag['toolver'] + '/' + itemTag['itemtype'] + '/' + itemTag['item'] + '/' + \
                         itemTag['date'] + '/' + itemTag['status'] + '-->'
    return markdownCommentTag


def CreateMarkdownEndCommentTag():
    markdownEndCommentTag = '<!--' + BOM_DOCUMENT_TOOL_VERISON + ' end auto-generation-->'
    return markdownEndCommentTag

def ClearAutoGeneratedMarkDownSection(fileName):
    retValue = True
    if (os.path.isfile(fileName)):
        f = open(fileName,'r')
        firstLine = f.readline()
        f.close()
        # extract the header information to determine if the file contains an auto-generated section
        extractCommentTag = ExtractMarkdownCommentTagForItem(firstLine)
        
        retValue = True

        if not (extractCommentTag["item"]):
            # has no auto-generated section there is no need to clear it
            f.close()
        else:
            # remove auto-generated markdown and if auto-generated comment tag is missing remove all text from file
            f = open(fileName,'r')
            lines = f.readlines()
            f.close()

            f = open(fileName,'w')
            autoGeneratedMarkdownCommentTagFound = False
            for testLine in lines:
                if testLine == "---\n" and autoGeneratedMarkdownCommentTagFound:
                    autoGeneratedMarkdownCommentTagFound = False
                elif not autoGeneratedMarkdownCommentTagFound:
                    autoGeneratedMarkdownCommentTagFound = IsAutoGeneratedMarkdownEndCommentTag(testLine)
                else:
                    f.write(testLine)

            f.close()
    else:
        retValue = False
    return retValue

#def AddNewMarkdownAutoGeneratedSection(fileName, text, description, itemtype):
    
#    # create a temp file
#    g = open(TEMP_FILE_NAME,'w+')
#    g.close()

#    #clear the auto generated mark down section
#    if (ClearAutoGeneratedMarkDownSection(fileName)):
#        # copy original manual contents to temp file and empty original file
#        f = open(fileName,'r')
#        copyLines = f.readlines()
#        f.close()

#        g = open(TEMP_FILE_NAME,'w')
#        g.writelines(copyLines)
#        g.close()



#        f = open(fileName,'w+')
#        f.close()
#    else:
#       # create file it doesn't exist or is corrupt
#       f = open(fileName,'w+')
#       f.close()
#    tempItemTag = EXAMPLE_COMMENT_TAG
#    tempItemTag['date'] = strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
#    tempItemTag['item'] = text
#    tempItemTag['itemtype'] = itemtype
#    markdownCommentTagForItem = CreateMarkdownCommentTagForItem(tempItemTag) +'\n'
#    markdownEndCommentTag = CreateMarkdownEndCommentTag() + '\n'
#    f = open(fileName,'w')
#    f.write(markdownCommentTagForItem)
#    itemHeader = MarkdownUtilities.Header(description,4)
#    f.write(MarkdownUtilities.Paragraphs(itemHeader,2))
#    if (itemtype == 'Assembly'):
#        f.write('> #####**@Requires**\n')
#    elif (itemtype == 'Part'):
#        f.write('> #####**@Constituent**\n')

#    f.write(markdownEndCommentTag)
#    # write dividing line between auto-generated section and manual section
#    f.write('---\n')

#    g = open(TEMP_FILE_NAME,'r')
#    manualLines = g.readlines()
#    g.close()

#    f.writelines(manualLines)
#    f.close()

#    os.remove(TEMP_FILE_NAME)


def AddNewMarkdownAutoGeneratedSection(components):
    for item in components.findall('./item'):
        ident = item.findall('ident')
        type = item.findall('type')
        description = item.findall('description')
        qty = item.findall('qty')
        image = item.findall('image')
        

        fileName = ident[0].text + '.md'
        ## create a temp file
        g = open(TEMP_FILE_NAME,'w+')
        g.close()

        #clear the auto generated mark down section
        if (ClearAutoGeneratedMarkDownSection(fileName)):
            # copy original manual contents to temp file and empty original file
            f = open(fileName,'r')
            copyLines = f.readlines()
            f.close()

            g = open(TEMP_FILE_NAME,'w')
            g.writelines(copyLines)
            g.close()

            f = open(fileName,'w+')
            f.close()
        else:
           # create file it doesn't exist or is corrupt
           f = open(fileName,'w+')
           f.close()
        tempItemTag = EXAMPLE_COMMENT_TAG
        tempItemTag['date'] = strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
        tempItemTag['item'] = ident[0].text
        tempItemTag['itemtype'] = type[0].text
        if (image):
           tempItemTag['image'] = image[0].text
        markdownCommentTagForItem = CreateMarkdownCommentTagForItem(tempItemTag) +'\n'
        markdownEndCommentTag = CreateMarkdownEndCommentTag() + '\n'
        f = open(fileName,'w')
        f.write(markdownCommentTagForItem)

        if (image):
            imageout = "[[images/" + image[0].text + "]]\n"
            f.write(imageout)
            itemHeader = MarkdownUtilities.Header(description[0].text + ' (' + qty[0].text + ')' ,4)
            f.write(MarkdownUtilities.Paragraphs(itemHeader,2))
        if (type[0].text == 'Assembly'):
            f.write('> #####**@Requires**\n')
            # Add subcomponents
            subcomponent = item.findall('subcomponent')
            for item in subcomponent[0].findall('./item'):
                ident = item.findall('ident')
                d1 = item.findall('description')
                q1 = item.findall('qty')                
                line = '> * [' + ident[0].text + '](' + ident[0].text + ')' + ' ' + d1[0].text + ' (' + q1[0].text + ') \n'
                f.write(line)
        elif (type[0].text == 'Part'):
            url = item.findall('url')
            if (url):
                firebom = "### Bill of Materials <a href='http://165.225.149.255:8080/firebom/rest/build?url=https%3A%2F%2Fgithub.com%2Ffirepick-delta%2Ffirepick-delta%2Fwiki%2F" \
                           + ident[0].text + "&x=45&y=7'><img src='http://upload.wikimedia.org/wikipedia/commons/4/45/FireBOM.JPG' height=20px/></a>\n \n"
                f.write(firebom)

                f.write('> #####**@Sources**\n')
                # Add Url
                line = '> * ' + url[0].text + '\n'
                f.write(line)
        f.write('\n')
        f.write(markdownEndCommentTag)
        # write dividing line between auto-generated section and manual section
        f.write('---\n')

        g = open(TEMP_FILE_NAME,'r')
        manualLines = g.readlines()
        g.close()

        f.writelines(manualLines)
        f.close()

        os.remove(TEMP_FILE_NAME)
