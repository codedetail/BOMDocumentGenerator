# -*- coding: utf-8; -*-
#
# This file is part of BOM Document Generator Tool.
#
# This tool is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MMC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
#The MIT License (MIT)

#Copyright (c) 2014 firepick

# (c) 2014 firepick-delta, http://delta.firepick.org/
# Author: David Shanklin, http://www.sagesmithing.org

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# This parser should be used with xml files generated from 'Known' sources
# and is specifically designed to parse a cubifydesign export from pdf.


import re
import os
from xml.etree import ElementTree
from xml.etree.ElementTree import Element
from xml.etree.ElementTree import SubElement





TOP_LEVEL_PART_NUMBER = "AFPD0001"
TOP_LEVEL_PART_NUMBER_RE = "(TOP_LEVEL_PART_NUMBER)"
TOP_LEVEL_FORMAT_RE = "(.*) - (.*)_Config&lt;([0-9]*?)&gt;_([0-9]*)"
DEFAULT_ITEM = {'item': '', 'itemtype' : '', 'description': '', 'config': '', 'number' : ''}

# follows the form of XML generated by PDF from Cubify Design
def findTopLevel(tree):
    topNode = tree.find('Node')
    # TBD probably should check if topNode is file TPD (for file integrity check)
    topLevel = topNode .find('Node')
    return topLevel


#def buildOuputTree():
#    # <toplevel/>
#    # outputTopLevel = Element('toplevel')
#    pass
#    # this tool expects the XML file to be named after the Top Level Part Number
#    #topLevelFile = TOP_LEVEL_PART_NUMBER + ".XML"
#    #root = ElementTree.parse(topLevelFile)
#    #inputTopLevel = findTopLevel(root)

#    #print(inputTopLevel.attrib[ 'Name'])

def testFile(fileName, tree):
    output_file = open( fileName, 'w+' )
    output_file.write( '<?xml version="1.0"?>' )
    output_file.write( tree )
    output_file.close()

def ParseItem(item, level, itemtype):
    retItem = DEFAULT_ITEM
    regex = re.compile(TOP_LEVEL_FORMAT_RE)

    searchObj = regex.search(item)
    if searchObj:
       retItem['item'] =  searchObj.group(0)

       retItem['item'] =  searchObj.group(1)
       retItem['item'] =  searchObj.group(2)
       retItem['item'] =  searchObj.group(3)
       retItem['item'] =  searchObj.group(4)
    return retItem
   

def buildOutputTree():
    # <toplevel/>
    outputTopLevel = Element('Pro')
    
    # this tool expects the XML file to be named after the Top Level Part Number
    topLevelFile = TOP_LEVEL_PART_NUMBER + ".XML"

    if (os.path.isfile(topLevelFile)):

        root = ElementTree.parse(topLevelFile)
        inputTopLevel = findTopLevel(root)
        
        nameInputTopLevel = inputTopLevel.attrib[ 'Name' ]
        print(nameInputTopLevel)
        commentTag = TOP_LEVEL_FORMAT_RE
        regex = re.compile(commentTag)
        found = re.findall(regex,nameInputTopLevel)
        print found
        newValue = ParseItem(nameInputTopLevel, 1, 'toplevel')  
        print newValue         
    if nameInputTopLevel.startswith(TOP_LEVEL_PART_NUMBER):
            topLevel = SubElement(outputTopLevel,'toplevel',name=TOP_LEVEL_PART_NUMBER) 
            print(topLevel.attrib['name'])
            testFile('toplevel.xml',ElementTree.tostring( outputTopLevel ) )
            assemblyLevel = SubElement(topLevel,'assembly')
            testFile('assemblylevel1.xml',ElementTree.tostring( outputTopLevel ) )
    return outputTopLevel


        

#HelloWorld()
buildOutputTree()


    







